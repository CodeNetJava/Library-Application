library application

config service -> 
1) store the configuration for all services
2) storing the files on the git so there is change dont for get to push code to the git

eureka service -> register all the services

gateway service -> 
1) handling the seciruty , keycloak server, 
1) has filter to extract data from the token and pass into services headers
2) springSecurityFilter chain will use to add paths matcher for admin,consumer,public, private routes

login-service -> 
1)login using user, pass generate token and gateway will pass it to the service haeders
2) register the user to the kaeyclok, role assignment to the users

book-service ->
1) add, update, delete books (many copies of a book will be there)

user-service -> 
1) add the user to the user db, when the login for the first time 
2) update and delete user

payment-service -> 
1) make the payment when requested -> when books issued
2) while paying the due

Notification service -> 
1) send the notification on the order completion
2) after 14 days of of issue, 15 days a book can be kept after that due will be applied

schedulars -> 
1) after 15 days of a book issue, per day 1 ru due will be generated
2) send the due date mail 1 day before the due date, on the due date , when due will be +10 ru 

order-service ->
1) issue book (at a time only 3 books can be at the users name, at a time user can order only 3 books if 0 zero are assigned previously)(10 ru per book charge for issue)
2) return book (check the due if any make payment)(add the book in the stock, increment stock by 1)
3) renew book (check due , update the trasaction dates)


try to make use of technologies if required 
kafka, saga design pattern, compesating trasaction, event driven design pattern
inter-service communication use -> feign client, rest template, webclient whereever sutaible 

